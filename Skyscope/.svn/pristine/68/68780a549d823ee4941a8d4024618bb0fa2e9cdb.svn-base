package com.syntun.inspect;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.syntun.etl.tools.BaseDaoSqlServer;

public class ComputeTmall {
	
	public static List<HashMap<String, String>> promotionTmall = BaseDaoSqlServer.getTbaleList("[skyscope].[dbo].[天猫特殊促销]");

	public static HashMap<String, Double> reduceTmall(HashMap<String, Double> priceMap, 
			List<HashMap<String, String>> TmallpromotionMap, HashMap<String, String> key) throws IOException {
		HashMap<String, Double> MZpriceMap = new HashMap<String, Double>();
		double tempPrice = priceMap.get("tempPrice");
		double maxPrice = priceMap.get("maxPrice");
		//计算促销用的价格
		double priceTemp = tempPrice;
		double promotionTemp = 0;
		// 从非促销价的促销内容中计算促销价
		for (HashMap<String, String> m : TmallpromotionMap) {
			//满折的价格
			double temp = getTmallPrice(tempPrice, m, key);
			if (promotionTemp == 0) {
				promotionTemp = temp;
			} else {
				if (temp != 0) {
					promotionTemp = promotionTemp > temp ? temp : promotionTemp;
				}
			}
		}
		// 如果促销价大于价格，交换促销价和价格
		if (promotionTemp > priceTemp) {
			double temProPri = priceTemp;
			priceTemp = promotionTemp;
			promotionTemp = temProPri;
		}
		
		MZpriceMap.put("tempPrice", promotionTemp);
		MZpriceMap.put("maxPrice", maxPrice);
		return MZpriceMap;
	}
	
	/*
	 * 满折计算
	 */
	public static Double getTmallPrice(double tempPrice, HashMap<String, String> promotion, HashMap<String,String> key) {
		double endPrice = 0;
		double man = 0;
		double jian = 0;
		String shopId = promotion.get("shop_id");
		String getDate = key.get("get_date");
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date getDateTime = null;
		try {
			getDateTime = df.parse(getDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		for (HashMap<String, String> map : promotionTmall) {
			if(shopId.equals(map.get("shop_id"))){
				Date startTime = null;
				Date endTime = null;
				try {
					startTime = df.parse(map.get("start_time"));
					endTime = df.parse(map.get("end_time"));
				} catch (ParseException e) {
					e.printStackTrace();
				}
				// 符合满减的情况
				if(tempPrice >= Double.parseDouble(map.get("满")) && man == 0
						&& getDateTime.getTime() >= startTime.getTime() 
						&& getDateTime.getTime() <= endTime.getTime() ){
					
					man = Double.parseDouble(map.get("满"));
					jian = Double.parseDouble(map.get("减"));
				}
				if(tempPrice >= Double.parseDouble(map.get("满"))
						&& Double.parseDouble(map.get("满")) > man
						&& getDateTime.getTime() >= startTime.getTime() 
						&& getDateTime.getTime() <= endTime.getTime() ){
					
					man = Integer.parseInt(map.get("满"));
					jian = Integer.parseInt(map.get("减"));
				}
			}
		}
		endPrice = tempPrice - jian;

		return endPrice;
	}
	
	/**
	 * 替换方法，将满减促销中的数据进行替换，使数据进行统一化
	 * 
	 * @param str
	 *            促销内容
	 * @return
	 */
	public static String replacePromotionInfo(String str) {
		String replacestr = str;
		for (HashMap<String, String> map : DataSelection.promotionReplace) {
			for (String key : map.keySet()) {
				replacestr = replacestr.replace(key, map.get(key));
			}
		}
		return replacestr;
	}
}
