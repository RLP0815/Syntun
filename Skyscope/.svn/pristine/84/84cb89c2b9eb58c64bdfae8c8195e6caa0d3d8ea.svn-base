package com.syntun.util;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import com.syntun.etl.tools.SyntunDate;
import com.syntun.zother.TmallStock;

public class TmallStockListener implements ServletContextListener{

	private TmallStockThread tmallStockThread;  
	
	@Override
	public void contextDestroyed(ServletContextEvent e) {  
		if (tmallStockThread != null && tmallStockThread.isInterrupted()) {  
			tmallStockThread.interrupt();  
       }
   }  
	
	@Override
	public void contextInitialized(ServletContextEvent e) {  
       String str = null;  
       if (str == null && tmallStockThread == null) {  
    	   tmallStockThread = new TmallStockThread();  
    	   tmallStockThread.start(); // servlet 上下文初始化时启动 socket
       }  
   }  

	public static void main(String[] args) {
		new TmallStockThread().start();
    	
	}

}  

/**
* 自定义一个 Class 线程类继承自线程类，重写 run() 方法，用于从后台获取并处理数据
*
* @author Champion.Wong
*
*/

class TmallStockThread extends Thread {  

	public void run() {  
		while (!this.isInterrupted()) {// 线程未中断执行循环
			Date day = new Date();    
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
			SimpleDateFormat dfh = new SimpleDateFormat("HH:mm:ss");
			String dateStr = df.format(day);
			//System.out.println(dfh.format(day));
			final String dateS = SyntunDate.jieDate(dateStr);
			int hour = Integer.parseInt(dfh.format(day).split(":")[0]);
			int min = Integer.parseInt(dfh.format(day).split(":")[1]);
			int second = Integer.parseInt(dfh.format(day).split(":")[2]);
			
			try {  
				if(hour==0 && (min>=25 && min<30)){
					
					Callable<String> call = new Callable<String>() {  
			            public String call(){  
			            	try { 
				            	//开始执行耗时操作  
			            		TmallStock.getResult(dateS);
				                return "线程执行完成.";  
			            	} catch (Exception e) {  
			    				e.printStackTrace(); 
			    				try {
			    					String[] emails = {"xiaoran.dai@syntun.com", "liping.ren@syntun.com"};
			    					//String[] emails = {"liping.ren@syntun.com"};
			    					String text = "天猫销量执行出错，请注意核查！ \n " + 
			    							"程序执行错误：\n " + e.getMessage();
			    					//System.out.println(text);
			    					SyntunEmail.sendSimpleEmail(emails, "天猫销量执行出错", text, "b", "text");
			    				} catch (Exception e1) {
			    					e1.printStackTrace();
			    				}
			    				return "错误"; 
			    			} 
			            	
			            }  
			        };  
			        ExecutorService exec = Executors.newFixedThreadPool(1);  
			        Future<String> future = exec.submit(call);  
			        
			        try {  
			        	String obj = future.get(1000 * 60 * 10, TimeUnit.MILLISECONDS); 
			            System.out.println("任务成功返回:" + obj); 
			        } catch (TimeoutException ex) {  
			            System.out.println("处理超时啦....");  
			            System.out.println(ex.toString());
			            try {
							String[] emails = {"liping.ren@syntun.com"};
							String text = "天猫销量执行超时，请注意核查！ \n " + 
									"程序执行错误：\n " + ex.toString();
							//System.out.println(text);
							SyntunEmail.sendSimpleEmail(emails, "天猫销量执行超时", text, "b", "text");
						} catch (Exception e1) {
							e1.printStackTrace();
						}
			        } 
			        // 关闭线程池  
			        exec.shutdown();  
			        try {
			        	Date dayA = new Date(); 
						String dateStrA = df.format(dayA);
						int hourA = Integer.parseInt(dfh.format(dayA).split(":")[0]);
						int minA = Integer.parseInt(dfh.format(dayA).split(":")[1]);
						int secondA = Integer.parseInt(dfh.format(dayA).split(":")[2]);
						System.out.println("===执行完成==睡二十三个小时===睡觉时间："+dateStrA+" "+hourA+":"+ minA+":"+secondA);
						Thread.sleep(60000 * 60 * 23); 
			        	
					} catch (InterruptedException e) {
						e.printStackTrace();
					} 
					
				}else{
					System.out.println("=====天猫销量执行程序睡五分钟===睡觉时间："+dateStr+" "+hour+":"+ min+":"+second);
					Thread.sleep(60000 * 5); 
				}
				//Thread.sleep(30000); 
			} catch (Exception e) {  
				e.printStackTrace(); 
				try {
					String[] emails = {"xiaoran.dai@syntun.com", "liping.ren@syntun.com"};
					//String[] emails = {"liping.ren@syntun.com"};
					String text = "天猫销量执行出错，请注意核查！ \n " + 
							"程序执行错误：\n " + e.getMessage();
					//System.out.println(text);
					SyntunEmail.sendSimpleEmail(emails, "天猫销量执行出错", text, "b", "text");
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}  
			
       }  
   }  
} 
