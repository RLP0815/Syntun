<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--namespace就是与此文件对应的Dao接口的全路径-->
<mapper namespace="com.syntun.dao.ModuleTwoDao" >
  <!--如下type的User就是mybatis-config.xml中配置的user-->
  <resultMap id="BaseResultMap" type="moduleTwo" >
    <id property="id" column="id" jdbcType="INTEGER" />
    <result property="ipPort" column="ip_port" jdbcType="VARCHAR" />
    <result property="dataBase" column="data_base" jdbcType="VARCHAR" />
    <result property="tableName" column="table_name" jdbcType="VARCHAR" />
    <result property="column1" column="column1" jdbcType="VARCHAR" />
  </resultMap>

  <select id="selectmoduleTwo" resultType="moduleTwo">
    select * FROM module_two
  </select>
  
  <select id="selectRecord" resultMap="BaseResultMap">
    select * FROM module_two ORDER BY id ASC LIMIT #{page},#{limit}
  </select>
  
  <select id="getCount" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM module_two where user_name = #{userName}
    <if test="tableName != null" > and table_name like CONCAT('%',#{tableName},'%') </if>
  </select>
  
  <select id="getAllList" parameterType="java.util.Map" resultMap="BaseResultMap">
     select * from module_two where table_name like CONCAT('%',#{tableName},'%') 
     	ORDER BY id ASC
  </select>
  
   <select id="getList" parameterType="java.util.Map"  resultMap="BaseResultMap">
     select * from module_two where user_name = #{userName}
     <if test="tableName != null" > and table_name like CONCAT('%',#{tableName},'%') </if>
      ORDER BY id ASC
      <if test="page != null" > LIMIT #{page},#{limit} </if>
  </select>
  
  <insert id="addRecord" keyProperty="id" useGeneratedKeys="true" parameterType="java.util.Map" >
    insert IGNORE into module_two (ip_port, data_base, table_name, column1,
    	user_name, add_time)
    values (#{ipPort}, #{dataBase}, #{tableName}, #{column1},
    	#{userName}, #{addTime})
  </insert>
  
  <update id="editRecord" parameterType="java.util.Map">
  	update module_two set
  		ip_port = #{ipPort},
  		data_base = #{dataBase},
  		table_name = #{tableName},
  		column1 = #{column1} where id = #{id}
  </update>
  
  <delete id="delRecord" parameterType="java.util.Map">
  	delete from module_two where id = #{id}
  </delete>
  
  <delete id="delAllRecord" parameterType="java.lang.Long">
    delete from module_two where id in
    <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>
  
  <select id="getDataBase" resultType="java.util.Map">
    SELECT DISTINCT data_base id,data_base name FROM module_two where column2 = '0' ORDER BY data_base ASC
  </select>
  
  <select id="getTableName" resultType="java.util.Map">
    SELECT DISTINCT table_name id,table_name name FROM module_two where column2 = '0' ORDER BY table_name ASC
  </select>
  
  <select id="getIllegalChar" parameterType="java.util.Map"  resultMap="BaseResultMap">
     select illegal_char column1 from module_two_char where 1=1 ORDER BY id ASC
  </select>
  
  <update id="editIllegalChar" parameterType="java.util.Map">
  	update module_two_char set
  		illegal_char = #{illegalChar} where id = #{id}
  </update>
  
</mapper>