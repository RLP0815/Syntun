<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       					http://www.springframework.org/schema/beans/spring-beans.xsd 
       					http://www.springframework.org/schema/context 
       					http://www.springframework.org/schema/context/spring-context.xsd 
       					http://www.springframework.org/schema/mvc 
       					http://www.springframework.org/schema/mvc/spring-mvc.xsd
       					http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

    <!-- 告知Spring，我们启用注解驱动 -->
    <mvc:annotation-driven/>
    <!-- org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
    	就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。 
    <mvc:default-servlet-handler/>-->
    <!-- 指定要扫描的包的位置 -->
    <context:component-scan base-package="com.syntun" />
    
    <!-- aop -->
    <bean id="sysLoggerAspect" class="com.syntun.controller.systemlog.SysLoggerAspect"></bean>
    <!-- 启动对@AspectJ注解的支持  -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
    <!-- 对静态资源文件的访问,因为Spring MVC会拦截所有请求,导致jsp页面中对js和CSS的引用也被拦截,
		配置后可以把对资源的请求交给项目的默认拦截器而不是Spring MVC
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/" />-->
	
	
    <!-- 配置Spring MVC的视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 有时我们需要访问JSP页面,可理解为在控制器controller的返回值加前缀和后缀,变成一个可用的URL地址 -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- 定义文件上传解析器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设定默认编码 -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 设定文件上传的最大值5MB，5*1024*1024 -->
        <property name="maxUploadSize" value="5242880" />
        <property name="maxInMemorySize" value="4096" />
    </bean>
</beans>